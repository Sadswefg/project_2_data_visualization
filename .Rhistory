# Merge with city coordinates
city_coords_sentiment_time <- city_coords %>%
left_join(city_sentiment_time, by = "City")
# Convert to spatial dataframe
city_coords_sentiment_time_sf <- st_as_sf(city_coords_sentiment_time, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Sentiment Analysis of Tourism Headlines in Vietnam"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange",
"Select Date Range:",
start = min(city_coords_sentiment_time$Date, na.rm = TRUE),
end = max(city_coords_sentiment_time$Date, na.rm = TRUE),
min = min(city_coords_sentiment_time$Date, na.rm = TRUE),
max = max(city_coords_sentiment_time$Date, na.rm = TRUE)),
selectInput("city", "Select City:", choices = unique(city_coords_sentiment_time$City), selected = "Hanoi"),
sliderInput("sentimentRange",
"Select Sentiment Score Range:",
min = min(city_coords_sentiment_time$compound, na.rm = TRUE),
max = max(city_coords_sentiment_time$compound, na.rm = TRUE),
value = c(min(city_coords_sentiment_time$compound, na.rm = TRUE), max(city_coords_sentiment_time$compound, na.rm = TRUE))
)
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Define server logic
server <- function(input, output) {
filtered_data <- reactive({
city_coords_sentiment_time %>%
filter(
Date >= input$dateRange[1],
Date <= input$dateRange[2],
compound >= input$sentimentRange[1],
compound <= input$sentimentRange[2])
})
mean_sentiment <- reactive({
data <- filtered_data()
if(nrow(data) > 0) {
mean(data$compound, na.rm = TRUE)
} else {
NA
}
})
output$map <- renderLeaflet({
data <- filtered_data()
leaflet() %>%
addTiles() %>%
addPolygons(data = vietnam_shapefile, fillColor = "lightgrey", color = "black", weight = 1,
highlightOptions = highlightOptions(weight = 3, color = "blue", bringToFront = TRUE)) %>%
setView(lng = 106.629664, lat = 16.054407, zoom = 6) %>%
addCircleMarkers(
data = data,
lat = ~Latitude,
lng = ~Longitude,
color = ~colorNumeric("viridis", domain = data$compound)(compound),
fillOpacity = 0.7,
radius = 5,
popup = ~paste(City, "<br>", "Date:", Date, "<br>", "Sentiment Score:", round(compound, 2))
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric("viridis", domain = city_coords_sentiment_time$compound),
values = city_coords_sentiment_time$compound,
title = "Sentiment Score",
opacity = 1
) %>%
addMarkers(
lng = mean(data$Longitude, na.rm = TRUE),
lat = mean(data$Latitude, na.rm = TRUE),
popup = paste("Mean Sentiment Score: ", round(mean_sentiment(), 2)),
label = paste("Mean Sentiment Score: ", round(mean_sentiment(), 2)),
labelOptions = labelOptions(noHide = TRUE)
)
})
output$meanSentiment <- renderText({
mean_value <- mean_sentiment()
if (!is.na(mean_value)) {
paste("Mean Sentiment Score for Selected Range: ", round(mean_value, 2))
} else {
"No data available for the selected range."
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Merge with city coordinates
city_coords_sentiment_time <- city_coords %>%
left_join(city_sentiment_time, by = "City")
# Convert to spatial dataframe
city_coords_sentiment_time_sf <- st_as_sf(city_coords_sentiment_time, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Sentiment Analysis of Tourism Headlines in Vietnam"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange",
"Select Date Range:",
start = min(city_coords_sentiment_time$Date, na.rm = TRUE),
end = max(city_coords_sentiment_time$Date, na.rm = TRUE),
min = min(city_coords_sentiment_time$Date, na.rm = TRUE),
max = max(city_coords_sentiment_time$Date, na.rm = TRUE)),
selectInput("city", "Select City:", choices = unique(city_coords_sentiment_time$City), selected = "Hanoi"),
sliderInput("sentimentRange",
"Select Sentiment Score Range:",
min = min(city_coords_sentiment_time$compound, na.rm = TRUE),
max = max(city_coords_sentiment_time$compound, na.rm = TRUE),
value = c(min(city_coords_sentiment_time$compound, na.rm = TRUE), max(city_coords_sentiment_time$compound, na.rm = TRUE))
)
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Define server logic
server <- function(input, output) {
filtered_data <- reactive({
city_coords_sentiment_time %>%
filter(City == input$city,
Date >= input$dateRange[1],
Date <= input$dateRange[2],
compound >= input$sentimentRange[1],
compound <= input$sentimentRange[2])
})
mean_sentiment <- reactive({
data <- filtered_data()
if(nrow(data) > 0) {
data %>%
group_by(Date) %>%
summarise(mean_compound = mean(compound, na.rm = TRUE)) %>%
summarise(overall_mean = mean(mean_compound, na.rm = TRUE)) %>%
pull(overall_mean)
} else {
NA
}
})
output$map <- renderLeaflet({
data <- filtered_data()
leaflet() %>%
addTiles() %>%
addPolygons(data = vietnam_shapefile, fillColor = "lightgrey", color = "black", weight = 1,
highlightOptions = highlightOptions(weight = 3, color = "blue", bringToFront = TRUE)) %>%
setView(lng = 106.629664, lat = 16.054407, zoom = 6) %>%
addCircleMarkers(
data = data,
lat = ~Latitude,
lng = ~Longitude,
color = ~colorNumeric("viridis", domain = data$compound)(compound),
fillOpacity = 0.7,
radius = 5,
popup = ~paste(City, "<br>", "Date:", Date, "<br>", "Sentiment Score:", round(compound, 2))
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric("viridis", domain = city_coords_sentiment_time$compound),
values = city_coords_sentiment_time$compound,
title = "Sentiment Score",
opacity = 1
) %>%
addMarkers(
lng = mean(data$Longitude, na.rm = TRUE),
lat = mean(data$Latitude, na.rm = TRUE),
popup = paste("Mean Sentiment Score: ", round(mean_sentiment(), 2)),
label = paste("Mean Sentiment Score: ", round(mean_sentiment(), 2)),
labelOptions = labelOptions(noHide = TRUE)
)
})
output$meanSentiment <- renderText({
mean_value <- mean_sentiment()
if (!is.na(mean_value)) {
paste("Mean Sentiment Score for Selected Range: ", round(mean_value, 2))
} else {
"No data available for the selected range."
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Vietnam Tourism Sentiment Analysis"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange", "Select Date Range:",
start = min(df$Date),
end = max(df$Date),
min = min(df$Date),
max = max(df$Date)),
sliderInput("sentimentRange", "Select Sentiment Range:",
min = min(df$compound, na.rm = TRUE),
max = max(df$compound, na.rm = TRUE),
value = c(min(df$compound, na.rm = TRUE), max(df$compound, na.rm = TRUE))),
selectInput("city", "Select City (Optional):", choices = c("All", unique(df$City)), selected = "All")
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Define server logic for the Shiny app
server <- function(input, output) {
filtered_data <- reactive({
data <- df %>%
filter(Date >= input$dateRange[1] & Date <= input$dateRange[2] &
compound >= input$sentimentRange[1] & compound <= input$sentimentRange[2])
if (input$city != "All") {
data <- data %>% filter(City == input$city)
}
data <- data %>%
group_by(City) %>%
filter(mean(compound, na.rm = TRUE) > 0) %>%
ungroup()
return(data)
})
mean_sentiment <- reactive({
data <- filtered_data()
if (nrow(data) > 0) {
data %>%
summarise(mean_compound = mean(compound, na.rm = TRUE)) %>%
pull(mean_compound)
} else {
NA
}
})
output$map <- renderLeaflet({
data <- filtered_data()
leaflet(data) %>%
addTiles() %>%
addCircles(
lat = ~Latitude, lng = ~Longitude, weight = 1,
radius = ~sqrt(abs(compound)) * 30000,
color = ~ifelse(compound > 0, "green", ifelse(compound < 0, "red", "blue")),
fillOpacity = 0.7, popup = ~paste(City, "<br>", "Date:", Date, "<br>", "Sentiment Score:", round(compound, 2))
) %>%
addLegend(position = "bottomright", pal = colorNumeric("viridis", domain = df$compound), values = df$compound, title = "Sentiment Score", opacity = 1)
})
output$meanSentiment <- renderText({
mean_value <- mean_sentiment()
if (!is.na(mean_value)) {
paste("Mean Sentiment Score for Selected Range: ", round(mean_value, 2))
} else {
"No data available for the selected range."
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load the dataset
df <- read_csv("data/reddit_tourism_headlines_with_sentiment.csv")
# Convert the Date column to Date type
df$Date <- as.Date(df$Date, format="%Y-%m-%d")
# Aggregate sentiment scores by city
city_sentiment <- df %>%
group_by(City) %>%
summarise(
compound = mean(compound, na.rm = TRUE),
positive = mean(positive, na.rm = TRUE),
neutral = mean(neutral, na.rm = TRUE),
negative = mean(negative, na.rm = TRUE)
)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Vietnam Tourism Sentiment Analysis"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange", "Select Date Range:",
start = min(df$Date),
end = max(df$Date),
min = min(df$Date),
max = max(df$Date)),
sliderInput("sentimentRange", "Select Sentiment Range:",
min = min(df$compound, na.rm = TRUE),
max = max(df$compound, na.rm = TRUE),
value = c(min(df$compound, na.rm = TRUE), max(df$compound, na.rm = TRUE))),
selectInput("city", "Select City (Optional):", choices = c("All", unique(df$City)), selected = "All")
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Define server logic for the Shiny app
server <- function(input, output) {
filtered_data <- reactive({
data <- df %>%
filter(Date >= input$dateRange[1] & Date <= input$dateRange[2] &
compound >= input$sentimentRange[1] & compound <= input$sentimentRange[2])
if (input$city != "All") {
data <- data %>% filter(City == input$city)
}
data <- data %>%
group_by(City) %>%
filter(mean(compound, na.rm = TRUE) > 0) %>%
ungroup()
return(data)
})
mean_sentiment <- reactive({
data <- filtered_data()
if (nrow(data) > 0) {
data %>%
summarise(mean_compound = mean(compound, na.rm = TRUE)) %>%
pull(mean_compound)
} else {
NA
}
})
output$map <- renderLeaflet({
data <- filtered_data()
leaflet(data) %>%
addTiles() %>%
addCircles(
lat = ~Latitude, lng = ~Longitude, weight = 1,
radius = ~sqrt(abs(compound)) * 30000,
color = ~ifelse(compound > 0, "green", ifelse(compound < 0, "red", "blue")),
fillOpacity = 0.7, popup = ~paste(City, "<br>", "Date:", Date, "<br>", "Sentiment Score:", round(compound, 2))
) %>%
addLegend(position = "bottomright", pal = colorNumeric("viridis", domain = df$compound), values = df$compound, title = "Sentiment Score", opacity = 1)
})
output$meanSentiment <- renderText({
mean_value <- mean_sentiment()
if (!is.na(mean_value)) {
paste("Mean Sentiment Score for Selected Range: ", round(mean_value, 2))
} else {
"No data available for the selected range."
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Merge with city coordinates
city_coords_sentiment_time <- city_coords %>%
left_join(city_sentiment_time, by = "City")
# Convert to spatial dataframe
city_coords_sentiment_time_sf <- st_as_sf(city_coords_sentiment_time, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Sentiment Analysis of Tourism Headlines in Vietnam"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange",
"Select Date Range:",
start = min(city_coords_sentiment_time$Date, na.rm = TRUE),
end = max(city_coords_sentiment_time$Date, na.rm = TRUE),
min = min(city_coords_sentiment_time$Date, na.rm = TRUE),
max = max(city_coords_sentiment_time$Date, na.rm = TRUE)),
selectInput("city", "Select City:", choices = unique(city_coords_sentiment_time$City), selected = "Hanoi"),
sliderInput("sentimentRange",
"Select Sentiment Score Range:",
min = min(city_coords_sentiment_time$compound, na.rm = TRUE),
max = max(city_coords_sentiment_time$compound, na.rm = TRUE),
value = c(min(city_coords_sentiment_time$compound, na.rm = TRUE), max(city_coords_sentiment_time$compound, na.rm = TRUE))
)
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Define server logic
server <- function(input, output) {
filtered_data <- reactive({
city_coords_sentiment_time %>%
filter(City == input$city,
Date >= input$dateRange[1],
Date <= input$dateRange[2],
compound >= input$sentimentRange[1],
compound <= input$sentimentRange[2])
})
mean_sentiment <- reactive({
filtered_data() %>%
summarise(mean_compound = mean(compound, na.rm = TRUE)) %>%
pull(mean_compound)
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = vietnam_shapefile, fillColor = "lightgrey", color = "black", weight = 1,
highlightOptions = highlightOptions(weight = 3, color = "blue", bringToFront = TRUE)) %>%
setView(lng = 106.629664, lat = 16.054407, zoom = 6) %>%
addCircleMarkers(
data = filtered_data(),
lat = ~Latitude,
lng = ~Longitude,
color = ~colorNumeric("viridis", domain = filtered_data()$compound)(compound),
fillOpacity = 0.7,
radius = 5,
popup = ~paste(City, "<br>", "Date:", Date, "<br>", "Sentiment Score:", round(compound, 2))
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric("viridis", domain = city_coords_sentiment_time$compound),
values = city_coords_sentiment_time$compound,
title = "Sentiment Score",
opacity = 1
)
})
output$meanSentiment <- renderText({
mean_value <- mean_sentiment()
paste("Mean Sentiment Score for Selected Range: ", round(mean_value, 2))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Merge with city coordinates
city_coords_sentiment_time <- city_coords %>%
left_join(city_sentiment_time, by = "City")
# Convert to spatial dataframe
city_coords_sentiment_time_sf <- st_as_sf(city_coords_sentiment_time, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Sentiment Analysis of Tourism Headlines in Vietnam"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange",
"Select Date Range:",
start = min(city_coords_sentiment_time$Date, na.rm = TRUE),
end = max(city_coords_sentiment_time$Date, na.rm = TRUE),
min = min(city_coords_sentiment_time$Date, na.rm = TRUE),
max = max(city_coords_sentiment_time$Date, na.rm = TRUE)),
selectInput(choices = unique(city_coords_sentiment_time$City)),
sliderInput("sentimentRange",
"Select Sentiment Score Range:",
min = min(city_coords_sentiment_time$compound, na.rm = TRUE),
max = max(city_coords_sentiment_time$compound, na.rm = TRUE),
value = c(min(city_coords_sentiment_time$compound, na.rm = TRUE), max(city_coords_sentiment_time$compound, na.rm = TRUE))
)
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Merge with city coordinates
city_coords_sentiment_time <- city_coords %>%
left_join(city_sentiment_time, by = "City")
# Convert to spatial dataframe
city_coords_sentiment_time_sf <- st_as_sf(city_coords_sentiment_time, coords = c("Longitude", "Latitude"), crs = 4326)
ui <- fluidPage(
titlePanel("Sentiment Analysis of Tourism Headlines in Vietnam"),
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange",
"Select Date Range:",
start = min(city_coords_sentiment_time$Date, na.rm = TRUE),
end = max(city_coords_sentiment_time$Date, na.rm = TRUE),
min = min(city_coords_sentiment_time$Date, na.rm = TRUE),
max = max(city_coords_sentiment_time$Date, na.rm = TRUE)),
selectInput("city", "Select City:", choices = unique(city_coords_sentiment_time$City), selected = "Hanoi"),
sliderInput("sentimentRange",
"Select Sentiment Score Range:",
min = min(city_coords_sentiment_time$compound, na.rm = TRUE),
max = max(city_coords_sentiment_time$compound, na.rm = TRUE),
value = c(min(city_coords_sentiment_time$compound, na.rm = TRUE), max(city_coords_sentiment_time$compound, na.rm = TRUE))
)
),
mainPanel(
leafletOutput("map"),
textOutput("meanSentiment")
)
)
)
# Define server logic
server <- function(input, output) {
filtered_data <- reactive({
city_coords_sentiment_time %>%
filter(
Date >= input$dateRange[1],
Date <= input$dateRange[2],
compound >= input$sentimentRange[1],
compound <= input$sentimentRange[2])
})
mean_sentiment <- reactive({
filtered_data() %>%
summarise(mean_compound = mean(compound, na.rm = TRUE)) %>%
pull(mean_compound)
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = vietnam_shapefile, fillColor = "lightgrey", color = "black", weight = 1,
highlightOptions = highlightOptions(weight = 3, color = "blue", bringToFront = TRUE)) %>%
setView(lng = 106.629664, lat = 16.054407, zoom = 6) %>%
addCircleMarkers(
data = filtered_data(),
lat = ~Latitude,
lng = ~Longitude,
color = ~colorNumeric("viridis", domain = filtered_data()$compound)(compound),
fillOpacity = 0.7,
radius = 5,
popup = ~paste(City, "<br>", "Date:", Date, "<br>", "Sentiment Score:", round(compound, 2))
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric("viridis", domain = city_coords_sentiment_time$compound),
values = city_coords_sentiment_time$compound,
title = "Sentiment Score",
opacity = 1
)
})
output$meanSentiment <- renderText({
mean_value <- mean_sentiment()
paste("Mean Sentiment Score for Selected Range: ", round(mean_value, 2))
})
}
# Run the application
shinyApp(ui = ui, server = server)
